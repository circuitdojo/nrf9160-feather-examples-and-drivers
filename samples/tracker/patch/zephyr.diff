diff --git a/drivers/sensor/lis2dh/Kconfig b/drivers/sensor/lis2dh/Kconfig
index 63b50edd53..e8193a0abf 100644
--- a/drivers/sensor/lis2dh/Kconfig
+++ b/drivers/sensor/lis2dh/Kconfig
@@ -90,6 +90,18 @@ config LIS2DH_OPER_MODE_LOW_POWER
 
 endchoice
 
+choice LIS2DH_ANYM_INT_PIN
+	prompt "Interrupt Configuration"
+	default LIS2DH_ANYM_USE_INT2
+
+config LIS2DH_ANYM_USE_INT2
+	bool "use int2 for motion events"
+
+config LIS2DH_ANYM_USE_INT1
+	bool "use int1 for motion events"
+
+endchoice
+
 choice
 	prompt "Output data rate frequency"
 	default LIS2DH_ODR_RUNTIME
diff --git a/drivers/sensor/lis2dh/lis2dh.h b/drivers/sensor/lis2dh/lis2dh.h
index 74774d7535..94415c8bd6 100644
--- a/drivers/sensor/lis2dh/lis2dh.h
+++ b/drivers/sensor/lis2dh/lis2dh.h
@@ -92,6 +92,9 @@
 #define LIS2DH_EN_DRDY1_INT1_SHIFT	4
 #define LIS2DH_EN_DRDY1_INT1		BIT(LIS2DH_EN_DRDY1_INT1_SHIFT)
 
+#define LIS2DH_EN_IA1_INT1_SHIFT	6
+#define LIS2DH_EN_IA1_INT1			BIT(LIS2DH_EN_IA1_INT1_SHIFT)
+
 #define LIS2DH_REG_CTRL4		0x23
 #define LIS2DH_FS_SHIFT			4
 #define LIS2DH_FS_MASK			(BIT_MASK(2) << LIS2DH_FS_SHIFT)
@@ -118,6 +121,8 @@
 #define LIS2DH_REG_CTRL5		0x24
 #define LIS2DH_LIR_INT2_SHIFT		1
 #define LIS2DH_EN_LIR_INT2		BIT(LIS2DH_LIR_INT2_SHIFT)
+#define LIS2DH_LIR_INT1_SHIFT		3
+#define LIS2DH_EN_LIR_INT1		BIT(LIS2DH_LIR_INT1_SHIFT)
 
 #define LIS2DH_REG_CTRL6		0x25
 #define LIS2DH_EN_INT2_INT2_SHIFT	5
@@ -154,6 +159,14 @@
 #define LIS2DH_INT_CFG_XHIE_XUPE	BIT(1)
 #define LIS2DH_INT_CFG_XLIE_XDOWNE	BIT(0)
 
+#define LIS2DH_ANYM_CFG                                     \
+	(LIS2DH_INT_CFG_ZHIE_ZUPE | LIS2DH_INT_CFG_YHIE_YUPE |  \
+	 LIS2DH_INT_CFG_XHIE_XUPE)
+
+#define LIS2DH_REG_INT1_SRC		0x31
+#define LIS2DH_REG_INT1_THS		0x32
+#define LIS2DH_REG_INT1_DUR		0x33
+
 #define LIS2DH_REG_INT2_SRC		0x35
 
 #define LIS2DH_REG_INT2_THS		0x36
@@ -217,6 +230,12 @@ struct lis2dh_transfer_function {
 			  uint8_t mask, uint8_t value);
 };
 
+enum lis2dh_int1_mode {
+	LIS2DH_INT1_INIT_MODE_UNSET,
+	LIS2DH_INT1_INIT_MODE_DRDY,
+	LIS2DH_INT1_INIT_MODE_ANYM
+};
+
 struct lis2dh_data {
 	const struct device *bus;
 	const struct lis2dh_transfer_function *hw_tf;
@@ -236,6 +255,7 @@ struct lis2dh_data {
 	sensor_trigger_handler_t handler_anymotion;
 	atomic_t trig_flags;
 	enum sensor_channel chan_drdy;
+	enum lis2dh_int1_mode int1_mode;
 
 #if defined(CONFIG_LIS2DH_TRIGGER_OWN_THREAD)
 	K_KERNEL_STACK_MEMBER(thread_stack, CONFIG_LIS2DH_THREAD_STACK_SIZE);
diff --git a/drivers/sensor/lis2dh/lis2dh_trigger.c b/drivers/sensor/lis2dh/lis2dh_trigger.c
index b1c36db5a8..3a0df940ed 100644
--- a/drivers/sensor/lis2dh/lis2dh_trigger.c
+++ b/drivers/sensor/lis2dh/lis2dh_trigger.c
@@ -73,45 +73,52 @@ static int lis2dh_start_trigger_int1(const struct device *dev)
 	uint8_t ctrl1 = 0U;
 	struct lis2dh_data *lis2dh = dev->data;
 
-	/* power down temporarily to align interrupt & data output sampling */
-	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &ctrl1);
-	if (unlikely(status < 0)) {
-		return status;
-	}
-	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
-					  ctrl1 & ~LIS2DH_ODR_MASK);
+	switch (lis2dh->int1_mode) {
+	case LIS2DH_INT1_INIT_MODE_DRDY:
+		/* power down temporarily to align interrupt & data output sampling */
+		status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &ctrl1);
+		if (unlikely(status < 0)) {
+			return status;
+		}
+		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
+						  ctrl1 & ~LIS2DH_ODR_MASK);
 
-	if (unlikely(status < 0)) {
-		return status;
-	}
+		if (unlikely(status < 0)) {
+			return status;
+		}
 
-	LOG_DBG("ctrl1=0x%x @tick=%u", ctrl1, k_cycle_get_32());
+		LOG_DBG("ctrl1=0x%x @tick=%u", ctrl1, k_cycle_get_32());
 
-	/* empty output data */
-	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
-					  raw, sizeof(raw));
-	if (unlikely(status < 0)) {
-		return status;
-	}
+		/* empty output data */
+		status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS, raw,
+						  sizeof(raw));
+		if (unlikely(status < 0)) {
+			return status;
+		}
 
-	setup_int1(dev, true);
+		setup_int1(dev, true);
 
-	/* re-enable output sampling */
-	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1, ctrl1);
-	if (unlikely(status < 0)) {
-		return status;
-	}
+		/* re-enable output sampling */
+		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1, ctrl1);
+		if (unlikely(status < 0)) {
+			return status;
+		}
 
-	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
-					 LIS2DH_EN_DRDY1_INT1,
-					 LIS2DH_EN_DRDY1_INT1);
+		return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
+						 LIS2DH_EN_DRDY1_INT1,
+						 LIS2DH_EN_DRDY1_INT1);
+	case LIS2DH_INT1_INIT_MODE_ANYM:
+		setup_int1(dev, true);
+
+		return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_CFG,
+						LIS2DH_ANYM_CFG);
+	default:
+		LOG_WRN("INT1 mode not set!");
+		return -1;
+	};
 }
 
-#define LIS2DH_ANYM_CFG (LIS2DH_INT_CFG_ZHIE_ZUPE | LIS2DH_INT_CFG_YHIE_YUPE |\
-			 LIS2DH_INT_CFG_XHIE_XUPE)
-
-static inline void setup_int2(const struct device *dev,
-			      bool enable)
+static inline void setup_int2(const struct device *dev, bool enable)
 {
 	struct lis2dh_data *lis2dh = dev->data;
 	const struct lis2dh_config *cfg = dev->config;
@@ -130,6 +137,7 @@ static int lis2dh_trigger_anym_set(const struct device *dev,
 	int status;
 	uint8_t reg_val;
 
+#if defined(CONFIG_LIS2DH_ANYM_USE_INT2)
 	setup_int2(dev, false);
 
 	/* cancel potentially pending trigger */
@@ -140,16 +148,33 @@ static int lis2dh_trigger_anym_set(const struct device *dev,
 
 	/* make sure any pending interrupt is cleared */
 	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_INT2_SRC, &reg_val);
+#elif defined(CONFIG_LIS2DH_ANYM_USE_INT1)
+	setup_int1(dev, false);
+
+	/* cancel potentially pending trigger */
+	atomic_clear_bit(&lis2dh->trig_flags, TRIGGED_INT1);
+
+	/* disable all interrupt 1 events */
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_CFG, 0);
+
+	/* make sure any pending interrupt is cleared */
+	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_INT1_SRC, &reg_val);
+#endif
 
 	lis2dh->handler_anymotion = handler;
 	if ((handler == NULL) || (status < 0)) {
 		return status;
 	}
 
-	/* serialize start of int2 in thread to synchronize output sampling
+	/* serialize start of intx in thread to synchronize output sampling
 	 * and first interrupt. this avoids concurrent bus context access.
 	 */
+#if defined(CONFIG_LIS2DH_ANYM_USE_INT2)
 	atomic_set_bit(&lis2dh->trig_flags, START_TRIG_INT2);
+#elif defined(CONFIG_LIS2DH_ANYM_USE_INT1)
+	atomic_set_bit(&lis2dh->trig_flags, START_TRIG_INT1);
+#endif
+
 #if defined(CONFIG_LIS2DH_TRIGGER_OWN_THREAD)
 	k_sem_give(&lis2dh->gpio_sem);
 #elif defined(CONFIG_LIS2DH_TRIGGER_GLOBAL_THREAD)
@@ -182,14 +207,40 @@ int lis2dh_trigger_set(const struct device *dev,
 			return -ENOTSUP;
 		}
 
+		/* Check if int1 has already been set */
+		if (lis2dh->int1_mode == LIS2DH_INT1_INIT_MODE_UNSET) {
+			lis2dh->int1_mode = LIS2DH_INT1_INIT_MODE_ANYM;
+		} else {
+			LOG_ERR("Trigger already initialized!");
+			return -EALREADY;
+		}
+
 		return lis2dh_trigger_drdy_set(dev, trig->chan, handler);
 	} else if (trig->type == SENSOR_TRIG_DELTA) {
+#if defined(CONFIG_LIS2DH_ANYM_USE_INT2)
 		/* If irq_gpio is not configured in DT just return error */
 		if (!lis2dh->gpio_int2) {
 			LOG_ERR("AnyMotion (INT2) trigger not supported");
 			return -ENOTSUP;
 		}
 		return lis2dh_trigger_anym_set(dev, handler);
+#elif defined(CONFIG_LIS2DH_ANYM_USE_INT1)
+
+		/* Check if int1 has already been set */
+		if (lis2dh->int1_mode == LIS2DH_INT1_INIT_MODE_UNSET) {
+			lis2dh->int1_mode = LIS2DH_INT1_INIT_MODE_ANYM;
+		} else {
+			LOG_ERR("Trigger already initialized!");
+			return -EALREADY;
+		}
+
+		/* If irq_gpio is not configured in DT just return error */
+		if (!lis2dh->gpio_int1) {
+			LOG_ERR("AnyMotion (INT1) trigger not supported");
+			return -ENOTSUP;
+		}
+		return lis2dh_trigger_anym_set(dev, handler);
+#endif
 	}
 
 	return -ENOTSUP;
@@ -203,34 +254,14 @@ int lis2dh_acc_slope_config(const struct device *dev,
 	int status;
 
 	if (attr == SENSOR_ATTR_SLOPE_TH) {
-		uint8_t range_g, reg_val;
-		uint32_t slope_th_ums2;
-
-		status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_CTRL4,
-						 &reg_val);
-		if (status < 0) {
-			return status;
-		}
-
-		/* fs reg value is in the range 0 (2g) - 3 (16g) */
-		range_g = 2 * (1 << ((LIS2DH_FS_MASK & reg_val)
-				      >> LIS2DH_FS_SHIFT));
-
-		slope_th_ums2 = val->val1 * 1000000 + val->val2;
-
-		/* make sure the provided threshold does not exceed range */
-		if ((slope_th_ums2 - 1) > (range_g * SENSOR_G)) {
-			return -EINVAL;
-		}
-
-		/* 7 bit full range value */
-		reg_val = 128 / range_g * (slope_th_ums2 - 1) / SENSOR_G;
-
-		LOG_INF("int2_ths=0x%x range_g=%d ums2=%u", reg_val,
-			    range_g, slope_th_ums2 - 1);
-
+#ifdef CONFIG_LIS2DH_ANYM_USE_INT1
+		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_THS,
+						  val->val1);
+#else
 		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT2_THS,
-						  reg_val);
+						  val->val1);
+#endif
+
 	} else { /* SENSOR_ATTR_SLOPE_DUR */
 		/*
 		 * slope duration is measured in number of samples:
@@ -240,10 +271,15 @@ int lis2dh_acc_slope_config(const struct device *dev,
 			return -ENOTSUP;
 		}
 
-		LOG_INF("int2_dur=0x%x", val->val1);
+		LOG_INF("intx_dur=0x%x", val->val1);
 
+#ifdef CONFIG_LIS2DH_ANYM_USE_INT1
+		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_DUR,
+						  val->val1);
+#else
 		status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT2_DUR,
 						  val->val1);
+#endif
 	}
 
 	return status;
@@ -311,8 +347,31 @@ static void lis2dh_thread_cb(const struct device *dev)
 	}
 
 	if (lis2dh->gpio_int1 &&
-			atomic_test_and_clear_bit(&lis2dh->trig_flags,
-			TRIGGED_INT1)) {
+	    atomic_test_and_clear_bit(&lis2dh->trig_flags, TRIGGED_INT1)) {
+
+#ifdef CONFIG_LIS2DH_ANYM_USE_INT1
+
+		struct sensor_trigger anym_trigger = {
+			.type = SENSOR_TRIG_DELTA,
+			.chan = lis2dh->chan_drdy,
+		};
+		uint8_t reg_val;
+
+		/* clear interrupt 1 to de-assert int2 line */
+		status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_INT1_SRC,
+						 &reg_val);
+		if (status < 0) {
+			LOG_ERR("clearing interrupt 1 failed: %d", status);
+			return;
+		}
+
+		if (likely(lis2dh->handler_anymotion != NULL)) {
+			lis2dh->handler_anymotion(dev, &anym_trigger);
+		}
+
+		LOG_INF("@tick=%u int1_src=0x%x", k_cycle_get_32(), reg_val);
+
+#else
 		struct sensor_trigger drdy_trigger = {
 			.type = SENSOR_TRIG_DATA_READY,
 			.chan = lis2dh->chan_drdy,
@@ -321,6 +380,7 @@ static void lis2dh_thread_cb(const struct device *dev)
 		if (likely(lis2dh->handler_drdy != NULL)) {
 			lis2dh->handler_drdy(dev, &drdy_trigger);
 		}
+#endif
 
 		return;
 	}
@@ -426,13 +486,52 @@ int lis2dh_init_interrupt(const struct device *dev)
 
 	LOG_INF("int1 on %s.%02u", cfg->irq1_dev_name, cfg->irq1_pin);
 
+#ifdef CONFIG_LIS2DH_ANYM_USE_INT1
+
+	/* disable interrupt 1 in case of warm (re)boot */
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_INT1_CFG, 0);
+	if (status < 0) {
+		LOG_ERR("Interrupt 1 disable reg write failed (%d)", status);
+		return status;
+	}
+
+	(void)memset(raw, 0, sizeof(raw));
+	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_INT1_THS, raw,
+					   sizeof(raw));
+	if (status < 0) {
+		LOG_ERR("Burst write to INT1 THS failed (%d)", status);
+		return status;
+	}
+
+	/* enable interrupt 1 on int1 line */
+	status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL3,
+					   LIS2DH_EN_IA1_INT1,
+					   LIS2DH_EN_IA1_INT1);
+
+	/* latch int1 line interrupt */
+	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL5,
+					  LIS2DH_EN_LIR_INT1);
+	if (status < 0) {
+		LOG_ERR("INT1 latch enable reg write failed (%d)", status);
+		return status;
+	}
+
+#endif
+
 	/*
 	 * Setup INT2 (for Any Motion) if defined in DT
 	 */
+
+	if (cfg->irq2_dev_name == NULL) {
+		LOG_WRN("Cannot get pointer to irq2_dev_name");
+		status = 0;
+		goto end;
+	}
+
 	/* setup any motion gpio interrupt */
 	lis2dh->gpio_int2 = device_get_binding(cfg->irq2_dev_name);
 	if (lis2dh->gpio_int2 == NULL) {
-		LOG_INF("Cannot get pointer to irq2_dev_name");
+		LOG_ERR("Cannot get pointer to irq2_dev_name");
 		status = 0;
 		goto end;
 	}
